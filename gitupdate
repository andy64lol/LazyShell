#!/bin/bash

print_usage() {
  echo "Usage:"
  echo "  gitupdate                         # Update current directory (must be git repo)"
  echo "  gitupdate <directory>            # Update git repo in specified directory"
}

# === Mode 1: No arguments ===
if [ "$#" -eq 0 ]; then
  if [ ! -d .git ]; then
    echo "‚ùå Error: Current directory is not a git repository."
    exit 1
  fi

  CURRENT_BRANCH=$(git symbolic-ref --short HEAD)
  echo "üîÑ Updating current repo on branch: $CURRENT_BRANCH"

  git fetch origin || { echo "‚ùå Fetch failed!"; exit 1; }
  git reset --hard "origin/$CURRENT_BRANCH" || { echo "‚ùå Reset failed!"; exit 1; }

  echo "‚úÖ Update complete."
  exit 0
fi

# === Mode 2: One argument = target directory ===
if [ "$#" -eq 1 ]; then
  TARGET_DIR="$1"

  if [ ! -d "$TARGET_DIR" ]; then
    echo "‚ùå Error: '$TARGET_DIR' is not a directory."
    exit 1
  fi

  if [ ! -d "$TARGET_DIR/.git" ]; then
    echo "‚ùå Error: '$TARGET_DIR' is not a git repository."
    exit 1
  fi

  cd "$TARGET_DIR" || { echo "‚ùå Failed to cd into $TARGET_DIR"; exit 1; }

  CURRENT_BRANCH=$(git symbolic-ref --short HEAD)
  echo "üîÑ Updating '$TARGET_DIR' on branch: $CURRENT_BRANCH"

  git fetch origin || { echo "‚ùå Fetch failed!"; exit 1; }
  git reset --hard "origin/$CURRENT_BRANCH" || { echo "‚ùå Reset failed!"; exit 1; }

  echo "‚úÖ Update complete."
  exit 0
fi

# === Mode 3: Full manual (URL, PATH, FILE) ===
if [ "$#" -eq 3 ]; then
  REPO_URL="$1"
  LOCAL_PATH="$2"
  FILE_PATH="$3"

  if [ ! -d "$LOCAL_PATH" ]; then
    echo "üì• Directory does not exist. Cloning repository..."
    git clone "$REPO_URL" "$LOCAL_PATH" || { echo "‚ùå Clone failed!"; exit 1; }
  else
    echo "üìÅ Directory exists. Updating repository..."
    cd "$LOCAL_PATH" || { echo "‚ùå Cannot enter directory $LOCAL_PATH"; exit 1; }

    if [ ! -d ".git" ]; then
      echo "‚ö†Ô∏è Not a git repository. Re-cloning..."
      cd ..
      rm -rf "$LOCAL_PATH"
      git clone "$REPO_URL" "$LOCAL_PATH" || { echo "‚ùå Clone failed!"; exit 1; }
      exit 0
    fi

    CURRENT_BRANCH=$(git symbolic-ref --short HEAD)
    echo "üîÑ Updating branch: $CURRENT_BRANCH"

    git fetch origin || { echo "‚ùå Fetch failed!"; exit 1; }
    git reset --hard "origin/$CURRENT_BRANCH" || { echo "‚ùå Reset failed!"; exit 1; }
  fi

  # Check file
  if [ -f "$LOCAL_PATH/$FILE_PATH" ]; then
    echo "‚úÖ File '$FILE_PATH' found."
  else
    echo "‚ö†Ô∏è Warning: File '$FILE_PATH' not found."
  fi

  echo "‚úÖ Git update complete."
  exit 0
fi

# === Invalid usage ===
echo "‚ùå Invalid arguments."
print_usage
exit 1

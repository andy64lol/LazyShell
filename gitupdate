#!/bin/bash

# Define repo shortcuts (add more as needed)
declare -A REPO_MAP
REPO_MAP["myrepo"]="https://github.com/user/myrepo.git|$HOME/repos/myrepo|README.md"
REPO_MAP["projectx"]="https://github.com/org/projectx.git|$HOME/dev/projectx|main.py"

print_usage() {
  echo "Usage:"
  echo "  gitupdate                        # update current directory git repo"
  echo "  gitupdate <repo_name>           # update known repo by shortcut name"
  echo "  gitupdate <url> <path> <file>   # update or clone specific repo"
}

# === Mode 1: No args, update current git repo ===
if [ "$#" -eq 0 ]; then
  if [ ! -d ".git" ]; then
    echo "‚ùå Error: Current directory is not a git repository."
    exit 1
  fi

  CURRENT_BRANCH=$(git symbolic-ref --short HEAD)
  echo "üîÑ Updating current repo on branch: $CURRENT_BRANCH"

  git fetch origin || { echo "‚ùå Fetch failed!"; exit 1; }
  git reset --hard "origin/$CURRENT_BRANCH" || { echo "‚ùå Reset failed!"; exit 1; }

  echo "‚úÖ Update complete."
  exit 0
fi

# === Mode 2: 1 argument ‚Äî shortcut name ===
if [ "$#" -eq 1 ]; then
  NAME="$1"
  if [ -z "${REPO_MAP[$NAME]}" ]; then
    echo "‚ùå Unknown repo name: '$NAME'"
    print_usage
    exit 1
  fi

  IFS="|" read -r REPO_URL LOCAL_PATH FILE_PATH <<< "${REPO_MAP[$NAME]}"
  set -- "$REPO_URL" "$LOCAL_PATH" "$FILE_PATH"
fi

# === Mode 3: 3 arguments ‚Äî full mode ===
if [ "$#" -eq 3 ]; then
  REPO_URL="$1"
  LOCAL_PATH="$2"
  FILE_PATH="$3"

  if [ ! -d "$LOCAL_PATH" ]; then
    echo "üì• Directory does not exist. Cloning repository..."
    git clone "$REPO_URL" "$LOCAL_PATH" || { echo "‚ùå Clone failed!"; exit 1; }
  else
    echo "üìÅ Directory exists. Updating repository..."
    cd "$LOCAL_PATH" || { echo "‚ùå Cannot enter directory $LOCAL_PATH"; exit 1; }

    if [ ! -d ".git" ]; then
      echo "‚ö†Ô∏è Not a git repository. Re-cloning..."
      cd ..
      rm -rf "$LOCAL_PATH"
      git clone "$REPO_URL" "$LOCAL_PATH" || { echo "‚ùå Clone failed!"; exit 1; }
      exit 0
    fi

    CURRENT_BRANCH=$(git symbolic-ref --short HEAD)
    echo "üîÑ Updating branch: $CURRENT_BRANCH"

    git fetch origin || { echo "‚ùå Fetch failed!"; exit 1; }
    git reset --hard "origin/$CURRENT_BRANCH" || { echo "‚ùå Reset failed!"; exit 1; }
  fi

  # Check for required file
  if [ -f "$LOCAL_PATH/$FILE_PATH" ]; then
    echo "‚úÖ File '$FILE_PATH' found."
  else
    echo "‚ö†Ô∏è Warning: File '$FILE_PATH' not found."
  fi

  echo "‚úÖ Git update complete."
  exit 0
fi

# === Invalid usage ===
echo "‚ùå Invalid arguments."
print_usage
exit 1

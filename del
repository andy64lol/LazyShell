#!/bin/bash

# List of protected dirs (exact paths blocked)
PROTECTED=("/" "/etc" "/bin" "/boot" "/dev" "/lib" "/lib64" "/proc" "/root" "/sbin" "/sys" "/usr" "/var" "/home")

is_protected() {
    for dir in "${PROTECTED[@]}"; do
        if [ "$1" = "$dir" ]; then
            return 0
        fi
    done
    return 1
}

usage() {
    echo "Usage:"
    echo "  del <package_or_file_name>      Remove a package or file"
    echo "  del -p <package_or_file_name>   Purge a package or delete a file"
    echo "  del -dir <directory_name>       Remove a directory"
    echo "  del -pdir <directory_name>      Purge a directory completely"
    exit 1
}

if [ "$#" -lt 1 ]; then
    usage
fi

OPTION="$1"
TARGET="$2"

# No option: normal remove package/file
if [ -z "$TARGET" ] || [[ "$OPTION" != "-"* ]]; then
    TARGET="$OPTION"
    echo "Removing package/file: $TARGET"
    sudo apt remove -y "$TARGET" 2>/dev/null || rm -i "$TARGET"
    exit 0
fi

# Options: -dir or -pdir (directories)
if [[ "$OPTION" == "-dir" || "$OPTION" == "-pdir" ]]; then
    TARGET_ABS=$(realpath -s "$TARGET" 2>/dev/null)
    if [ -z "$TARGET_ABS" ] || [ ! -d "$TARGET_ABS" ]; then
        echo "Error: '$TARGET' is not a valid directory."
        exit 1
    fi

    if is_protected "$TARGET_ABS"; then
        echo "Refusing to delete protected system directory: '$TARGET_ABS'"
        exit 1
    fi

    echo "The directory '$TARGET_ABS' contains the following files:"
    find "$TARGET_ABS" -print
    echo

    read -p "Are you sure you want to delete '$TARGET_ABS'? This cannot be undone. [y/N] " confirm
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        echo "Deletion cancelled."
        exit 0
    fi

    if [ "$OPTION" == "-dir" ]; then
        rm -r "$TARGET_ABS"
        echo "Directory '$TARGET_ABS' removed."
    else
        rm -rf "$TARGET_ABS"
        echo "Directory '$TARGET_ABS' purged."
    fi
    exit 0
fi

# Handle files or packages for -p
if [ "$OPTION" == "-p" ]; then
    echo "Purging package/file: $TARGET"
    sudo apt purge -y "$TARGET" 2>/dev/null || rm -f "$TARGET"
    exit 0
fi

# Fallback
usage